<?php

declare(strict_types=1);

namespace Baraja\Cms;


use Baraja\Cms\Proxy\GlobalAsset\CmsAsset;
use Baraja\Cms\Proxy\Proxy;

/**
 * @var string $basePath
 * @var CmsAsset[] $staticAssets
 * @var mixed[] $globalSettings
 * @var string|null $title
 * @var string $content
 * @var string $locale
 * @var mixed[] $menu
 * @var bool $isDebug
 * @var array<string, mixed> $settings
 * @var string $currentVersion
 */

?>
<!DOCTYPE html>
<html lang="<?= Helpers::escapeHtmlAttr($locale) ?>">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="description" content="Baraja administration">
	<meta name="author" content="Baraja.cz">
	<meta name="robots" content="noindex, nofollow, noarchive">
	<title><?= $title ? htmlspecialchars((string) $title) . ' | ' : '' ?>Admin</title>
	<link type="text/css" rel="stylesheet" href="<?= Helpers::escapeHtmlAttr(Proxy::getUrl('css/bootstrap-4-6-0.min.css')) ?>">
	<link type="text/css" rel="stylesheet" href="<?= Helpers::escapeHtmlAttr(Proxy::getUrl('css/bootstrap-vue-2-21-2.min.css')) ?>">
	<link type="text/css" rel="stylesheet" href="<?= Helpers::escapeHtmlAttr(Proxy::getUrl('core.css')) ?>">
	<?php
		if (($settings['user']['theme'] ?? '') !== '' && ($settings['user']['theme'] ?? '') !== 'light') {
			echo '<link type="text/css" rel="stylesheet" href="' . Helpers::escapeHtmlAttr(Proxy::getUrl('core-' . $settings['user']['theme'] . '.css')) . '">';
		}
	?>
	<link rel="shortcut icon" type="image/x-icon" href="<?= Helpers::escapeHtmlAttr(Proxy::getUrl('favicon.ico')) ?>">
	<div id="app-header"></div>
	<?php
	foreach ($staticAssets as $staticAsset) {
		if ($staticAsset->getFormat() === 'css') {
			echo '<link type="text/css" rel="stylesheet" href="'
                . Helpers::escapeHtmlAttr($staticAsset->getUrl())
                .'">' . "\n";
		}
	}
	?>
	<script>
        let basePath = <?=json_encode($basePath)?>;
        let baseApiPath = <?=json_encode($basePath . '/api/v1')?>;
        let cmsGlobalSettings = <?=json_encode($globalSettings)?>
	</script>
</head>

<body id="app-cms">
<div id="app">
	<div id="app-content">
		<div id="cms-menu" role="navigation">
			<cms-menu
					:structure="<?= Helpers::escapeHtmlAttr(json_encode($menu['structure'])) ?>"
					dashboard-link="<?= Helpers::escapeHtmlAttr($menu['dashboardLink']) ?>"
					:is-dashboard="<?= $menu['isDashboard'] ? 'true' : 'false' ?>"
					active-key="<?= $menu['activeKey'] ?? null ?>"
					:debug-mode="<?= $isDebug ? 'true' : 'false' ?>">
			</cms-menu>
		</div>
		<div role="main" class="cms-main">
			<b-alert variant="danger" :show="isOnline === false" dismissible>
				<table class="w-100">
					<tr>
						<td style="width:32px"><b-spinner small></b-spinner></td>
						<td>You are currently offline, some services may not be available now.</td>
					</tr>
				</table>
			</b-alert>
			<?= $content ?>
		</div>
	</div>
	<support-chat></support-chat>
	<cms-settings></cms-settings>
	<cms-support-sidebar></cms-support-sidebar>
	<cms-footer :year="<?=date('Y')?>" version="<?=htmlspecialchars($currentVersion)?>"></cms-footer>
</div>
<script src="<?= Helpers::escapeHtmlAttr(Proxy::getUrl($isDebug ? 'js/vue-2-6-11.js' : 'js/vue-2-6-11.min.js')) ?>"></script>
<script src="<?= Helpers::escapeHtmlAttr(Proxy::getUrl('js/bootstrap-vue-2-16-0.min.js')) ?>"></script>
<script src="<?= Helpers::escapeHtmlAttr(Proxy::getUrl('js/bootstrap-vue-icons-2-21-2.min.js')) ?>"></script>
<script src="<?= Helpers::escapeHtmlAttr(Proxy::getUrl('js/axios-0-21-1.min.js')) ?>"></script>
<?php
foreach ($staticAssets as $staticAsset) {
	if ($staticAsset->getFormat() === 'js') {
		echo '<script src="' . Helpers::escapeHtmlAttr($staticAsset->getUrl()) . '"></script>' . "\n";
	}
}
?>
<script>
    let axiosApi = axios.create({
       baseURL: <?=json_encode($basePath . '/api/v1')?>
    });
    axiosApi.interceptors.response.use((ok) => {
        let data = ok.data;
        if ('flashMessages' in data) {
            data.flashMessages.forEach(flashItem => {
                app.$bvToast.toast(flashItem.message, {
                    variant: flashItem.type,
                    title: 'Notification',
                    toaster: 'b-toaster-bottom-left'
                })
            })
        }
        return Promise.resolve(ok);
    }, (error) => {
        if (typeof error === 'object' && error.response === undefined) {
            app.$bvToast.toast(error.toString(), {
                variant: 'danger',
                title: 'Error',
                toaster: 'b-toaster-bottom-left'
	    });
            return;
        }
        let data = error.response.data;
        if ('flashMessages' in data) {
            data.flashMessages.forEach(flashItem => {
                app.$bvToast.toast(flashItem.message, {
                    variant: flashItem.type,
                    title: 'Warning',
                    toaster: 'b-toaster-bottom-left'
                })
            })
        }
        if ('message' in data) {
            app.$bvToast.toast(data.message, {
                variant: 'danger',
                title: 'Error',
                toaster: 'b-toaster-bottom-left'
            })
        }
        return Promise.reject(error);
    });
    let eventBus = new Vue();
    let app = new Vue({
        el: '#app',
        data() {
            return {
                isOnline: null
            }
        },
        mounted() {
            this.isOnline = navigator.onLine;
            window.addEventListener('online',  this.updateOnlineStatus);
            window.addEventListener('offline', this.updateOnlineStatus);
            setInterval(this.keepConnection, 5000);
        },
        methods: {
            updateOnlineStatus(event) {
                this.isOnline = navigator.onLine;
                if (this.isOnline === true) {
                    app.$bvToast.toast('The connection to the server has been successfully restored.', {
                        variant: 'success',
                        title: 'Connection info',
                        toaster: 'b-toaster-bottom-left'
                    })
                }
            },
            keepConnection() {
                if (this.isOnline === false) {
                    return;
                }
                axiosApi.get(`cms/keep-connection`)
                    .then(req => {
                        if (req.data.login === false) {
                            location.reload();
                        }
                    });
            }
        }
    });
</script>
</body>
</html>
